CURRENTLY WORKING ON:
    1.adding either editingFinished() or textChanged() triggers for each line edit
        a. Add writeToRoster() for each trigger used

pyuic5 RosterWindowV2.ui -o RosterWindowV2.py

cursor = conn.execute("SELECT wargear_id, cost from Datasheets_wargear WHERE datasheet_id=?", (unit_to_load,))
            result =cursor.fetchall()
            for row in result:
                wargear_input = {"wargear_id": row["wargear_id"],
                                    "wargear_cost": row["cost"]}
                self.wargear_list.append(wargear_input)
            # Pulling data for each wargear piece
            for entry in self.wargear_list:
                print("Entry is as follows:")
                print(entry)
                cursor = conn.execute("SELECT name, type, description from Wargear WHERE id=?", (entry["wargear_id"],))
                cursor2 = conn.execute("SELECT name, range, type, S, AP, D, abilities from Wargear_list WHERE wargear_id=?", (entry["wargear_id"],))
                result = cursor.fetchone()
                result2 = cursor2.fetchall()
                entry["wargear_name"] = result["name"]
                entry["wargear_type"] = result["type"]
                entry["wargear_description"] = result["description"]
                # If result2 is only one entry, add descriptions to existing list item
                # Otherwise, add sub-gear below it on the list for each profile
                if len(result2) == 1:
                    entry["wargear_range"] = result2[0]["range"]
                    entry["wargear_type"] = result2[0]["type"]
                    entry["wargear_s"] = result2[0]["S"]
                    entry["wargear_ap"] = result2[0]["AP"]
                    entry["wargear_d"] = result2[0]["D"]
                    entry["wargear_abilities"] = stripHTML(result2[0]["abilities"])
                    entry["is_active"] = False
                elif len(result2) > 1:
                    line_num = 0
                    while line_num < len(result2):
                        sub_entry = {"wargear_name":result2[line_num]["name"], "wargear_type":result2[line_num]["type"],
                                    "wargear_s":result2[line_num]["S"], "wargear_ap":result2[line_num]["AP"],
                                    "wargear_d":result2[line_num]["d"], "wargear_abilities":result2[line_num]["abilities"],
                                    "is_active": False}
                        self.wargear_list.insert(self.wargear_list.index(entry) + 1, sub_entry)
                        line_num += 1
                else:
                    print("ERROR: Incorrect wargear generation!")





sub_entry = {"wargear_name":result2[line_num]["name"], "wargear_type":result2[line_num]["type"],
                                    "wargear_s":result2[line_num]["S"], "wargear_ap":result2[line_num]["AP"],
                                    "wargear_d":result2[line_num]["d"], "wargear_abilities":result2[line_num]["abilities"],
                                    "is_active": False, "line_num": line_num}



        load_dialog = QFileDialog(self)
        load_dialog.setFileMode(QFileDialog.FileMode.AnyFile)
        load_dialog.setNameFilter("CrusadeTome roster files (*.ros)")
        load_dialog.setDirectory("C:\\Users\%%current_user\\Documents")
        load_dialog.setDefaultSuffix("ros")
        load_dialog.setViewMode(QFileDialog.ViewMode.Detail)

        self.active_roster.roster_name = self.ui.roster_name_line.text
        self.active_roster.roster_faction = self.ui.roster_faction_line.text
        self.active_roster.roster_owner = self.ui.roster_owner_line.text
        self.active_roster.roster_battles_total = self.ui.total_battles_line.text
        self.active_roster.roster_battles_won = self.ui.battles_won_line.text
        self.active_roster.roster_req_points = self.ui.req_points_line.text
        self.active_roster.roster_supply_limit = self.ui.supply_limit_line.text
        self.active_roster.roster_supply_used = self.ui.supply_used_line.text
        # No need to do units; by nature of how the addUnit method works,
        # The unit list is updated with every unit added 
        self.active_roster.roster_notes = self.ui.crusade_notes_text.text 