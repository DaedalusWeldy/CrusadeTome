cursor = conn.execute("SELECT wargear_id, cost from Datasheets_wargear WHERE datasheet_id=?", (unit_to_load,))
            result =cursor.fetchall()
            for row in result:
                wargear_input = {"wargear_id": row["wargear_id"],
                                    "wargear_cost": row["cost"]}
                self.wargear_list.append(wargear_input)
            # Pulling data for each wargear piece
            for entry in self.wargear_list:
                print("Entry is as follows:")
                print(entry)
                cursor = conn.execute("SELECT name, type, description from Wargear WHERE id=?", (entry["wargear_id"],))
                cursor2 = conn.execute("SELECT name, range, type, S, AP, D, abilities from Wargear_list WHERE wargear_id=?", (entry["wargear_id"],))
                result = cursor.fetchone()
                result2 = cursor2.fetchall()
                entry["wargear_name"] = result["name"]
                entry["wargear_type"] = result["type"]
                entry["wargear_description"] = result["description"]
                # If result2 is only one entry, add descriptions to existing list item
                # Otherwise, add sub-gear below it on the list for each profile
                if len(result2) == 1:
                    entry["wargear_range"] = result2[0]["range"]
                    entry["wargear_type"] = result2[0]["type"]
                    entry["wargear_s"] = result2[0]["S"]
                    entry["wargear_ap"] = result2[0]["AP"]
                    entry["wargear_d"] = result2[0]["D"]
                    entry["wargear_abilities"] = stripHTML(result2[0]["abilities"])
                    entry["is_active"] = False
                elif len(result2) > 1:
                    line_num = 0
                    while line_num < len(result2):
                        sub_entry = {"wargear_name":result2[line_num]["name"], "wargear_type":result2[line_num]["type"],
                                    "wargear_s":result2[line_num]["S"], "wargear_ap":result2[line_num]["AP"],
                                    "wargear_d":result2[line_num]["d"], "wargear_abilities":result2[line_num]["abilities"],
                                    "is_active": False}
                        self.wargear_list.insert(self.wargear_list.index(entry) + 1, sub_entry)
                        line_num += 1
                else:
                    print("ERROR: Incorrect wargear generation!")





sub_entry = {"wargear_name":result2[line_num]["name"], "wargear_type":result2[line_num]["type"],
                                    "wargear_s":result2[line_num]["S"], "wargear_ap":result2[line_num]["AP"],
                                    "wargear_d":result2[line_num]["d"], "wargear_abilities":result2[line_num]["abilities"],
                                    "is_active": False, "line_num": line_num}


print(DB_PATH)
testUnit = Unit()
testRoster = Roster()

testRoster.roster_name = "Test roster"
testRoster.roster_faction = "Adeptus Custodes"
testRoster.roster_owner = "Kitten"
testRoster.addNewUnit("000002521")
testRoster.addNewUnit("000001680")
testRoster.addNewUnit("000001560")

testRoster.unit_list[0].printUnit()
testRoster.unit_list[1].printUnit()
testRoster.unit_list[2].printUnit()



        output_dict["unit_title"] = self.unit_title
        output_dict["name"] = self.name
        output_dict["faction"] = self.faction
        output_dict["count"] = self.count
        output_dict["power_level"] = self.power_level
        output_dict["leader_name"] = self.leader_name
        output_dict["role"] = self.role
        output_dict["composition"] = self.composition
        output_dict["transport"] = self.transport
        output_dict["chosen_power_text"] = self.chosen_power_text
        output_dict["psychic_text"] = self.psychic_text
        output_dict["model_list"] = self.model_list
        output_dict["wargear_list"] = self.wargear_list
        output_dict["ability_list"] = self.ability_list
        output_dict["chosen_trait_list"] = self.chosen_trait_list
        output_dict["psychic_list"] = self.psychic_list
        output_dict["keywords_list"] = self.keywords_list
        output_dict["crusade_trait_list"] = self.crusade_trait_list
        output_dict["crusade_points"] = self.crusade_points
        output_dict["crusade_xp"] = self.crusade_xp
        output_dict["battle_kills"] = self.battle_kills
        output_dict["total_kills"] = self.total_kills


        temp_roster = UnitAndRoster.Roster()
        temp_roster.roster_name = temp_JSON["roster_name"]
        temp_roster.roster_faction = temp_JSON["roster_faction"]
        temp_roster.roster_owner = temp_JSON["roster_owner"]
        temp_roster.roster_power = temp_JSON["roster_power"]
        temp_roster.roster_battles_total = temp_JSON["roster_battles_total"]
        temp_roster.roster_battles_won = temp_JSON["roster_battles_won"]
        temp_roster.roster_req_points = temp_JSON["roster_req_points"]
        temp_roster.roster_supply_limit = temp_JSON["roster_supply_limit"]
        temp_roster.roster_supply_used = temp_JSON["roster_supply_used"]
        for entry in temp_JSON["unit_list"]:
            temp_unit = UnitAndRoster.Unit()
            temp_unit.loadFromDict(entry)
            temp_roster["unit_list"].append(temp_unit)
        temp_roster.roster_notes = temp_JSON["roster_notes"]
        temp_roster.crusade_data = temp_JSON["crusade_data"]


        temp_JSON = {}
        temp_JSON["roster_name"] = active_roster.roster_name
        temp_JSON["roster_faction"] = active_roster.roster_faction
        temp_JSON["roster_owner"] = active_roster.roster_owner
        temp_JSON["roster_power"] = active_roster.roster_power
        temp_JSON["roster_battles_total"] = active_roster.roster_battles_total
        temp_JSON["roster_battles_won"] = active_roster.roster_battles_won
        temp_JSON["roster_req_points"] = active_roster.roster_req_points
        temp_JSON["roster_supply_limit"] = active_roster.roster_supply_limit
        temp_JSON["roster_supply_used"] = active_roster.roster_supply_used
        for entry in active_roster.unit_list:
            temp_JSON["unit_list"].append(entry.convertToDict())
        temp_JSON["roster_notes"] = active_roster.roster_notes
        temp_JSON["crusade_data"] = active_roster.crusade_data


# input three items to request and return SQL data from the database
# -"columns" should be separated by comma ("model_id,name,faction" etc.)
# -"table" is name of the desired table, and is case sensitive
# -"filters" is always formatted as column=value ("id=" + desired ID number)
#  Subsequent, multiple filters must be separated by "AND", per SQL rules.
def ReadSQLData(columns, table, filters):
    # Create the string that will be used for queries 
    query = "SELECT " + columns + " from " +  table + "WHERE " + filters
    cursor.execute(query)
    return cursor.fetchall()



""""
print(DB_PATH)
testUnit = Unit()
testRoster = Roster()
testRoster2 = Roster()
file_path = "testRoster.json"

testRoster.roster_name = "Test roster"
testRoster.roster_faction = "Adeptus Custodes"
testRoster.roster_owner = "Kitten"
testRoster.addNewUnit("000002521")
testRoster.addNewUnit("000001680")
testRoster.addNewUnit("000001560")


with open("testRoster.ros", 'w') as file_output:
    json.dump(testRoster.outputRosterDict(), file_output)
    # json.dumps(testRoster, file_output)

if os.path.exists(file_path) == True:
    with open(file_path, 'r') as file_input:
        input_JSON = json.load(file_input)
        testRoster2.loadRosterFromJSON(input_JSON)

testRoster2.unit_list[0].printUnit()
"""



# Obtains basic clerical data on the unit like it's name, unit size, psyker 
    # capabilites, etc.
    def fetchUnitProfile(self, unit_id_to_load):
        with sqlite3.connect(self.DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            # Pulling raw info from Datasheets
            cursor = conn.execute("SELECT name, role, unit_composition, transport, priest," 
            + " psyker, faction_id from Datasheets WHERE id=?", (unit_id_to_load,))
            result = cursor.fetchone()
            # save information from SQL call into the unit_to_output
            self.unit_to_output["name"] = result["name"]
            self.unit_to_output["role"] = result["role"]
            self.unit_to_output["composition"] = self.stripHTML(result["unit_composition"])
            if result["transport"] != "":
                self.unit_to_output["transport"] = self.stripHTML(result["transport"])
            if result["priest"] != "":
                self.unit_to_output["priest_text"] = self.stripHTML(result['priest'])
            if result["psyker"] != "":
                self.unit_to_output["psychic_text"] = result["psyker"]
            self.faction = result["faction_id"]
    
    def fetchUnitAbilities(self, unit_id_to_load):
        with sqlite3.connect(self.DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            # Pulling raw info from Datasheets
            # Pulling ability pointer data
            cursor = conn.execute("SELECT line, ability_id, cost from Datasheets_abilities WHERE datasheet_id=?", (unit_id_to_load,))
            result = cursor.fetchall()
            for row in result:
                tempItem = {"ability_id": row["ability_id"], "cost":row["cost"]}
                self.unit_to_output["ability_list"].append(tempItem)
            # Using pointer data from previous step, pull actual text of abilities 
            for entry in self.unit_to_output["ability_list"]:
                cursor = conn.execute("SELECT name, description from Abilities WHERE id=?", (entry["ability_id"],))
                result = cursor.fetchone()
                entry["name"] = result["name"]
                entry["description"] = self.stripHTML(result["description"])

    def fetchUnitKeywords(self, unit_id_to_load):
        with sqlite3.connect(self.DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            # Pulling raw info from Datasheets
            # Pulling in unit's associated keywords
            cursor = conn.execute("SELECT keyword, model from Datasheets_keywords WHERE datasheet_id=?", (unit_id_to_load,))
            result = cursor.fetchall()
            for row in result:
                if row["model"] != "":
                    self.unit_to_output["keywords_list"].append('' + row["keyword"] + '(' + row["model"] + ')')
                else:
                    self.unit_to_output["keywords_list"].append(row["keyword"])

    def fetchUnitStats(self, unit_id_to_load):
        with sqlite3.connect(self.DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
        # Pulling stat values for each model in the unit
            cursor = conn.execute("SELECT name, M, WS, BS, S, T, W, A, Ld, Sv, Cost, cost_description," +
                "models_per_unit from Datasheets_models WHERE datasheet_id=?", (unit_id_to_load,))
            result = cursor.fetchall()
            for row in result:
                model_input = {"model_name": row["name"],
                    "model_M": row["M"], "model_WS": row["WS"],
                    "model_BS": row["BS"], "model_S": row["S"],
                    "model_T": row["T"], "model_W": row["W"],
                    "model_A": row["A"], "model_Ld": row["Ld"],
                    "model_Sv": row["Sv"], "model_count": 0}
                self.unit_to_output["model_list"].append(model_input)


def loadUnitSQLData(self, unit_to_load):
        with sqlite3.connect(DB_PATH) as conn:
            conn.row_factory = sqlite3.Row
            # Pulling raw info from Datasheets
            cursor = conn.execute("SELECT name, role, unit_composition, transport, priest, psyker, faction_id from Datasheets WHERE id=?", (unit_to_load,))
            result = cursor.fetchone()
            self.name = result["name"]
            self.role = result["role"]
            self.composition = stripHTML(result["unit_composition"])
            if self.transport != "":
                self.transport = result["transport"]
            if result["priest"] != "":
                self.priest_text = stripHTML(result['priest'])
            if result["psyker"] != "":
                self.psychic_text = result["psyker"]
            self.faction = result["faction_id"]
            # Pulling ability pointer data
            cursor = conn.execute("SELECT line, ability_id, cost from Datasheets_abilities WHERE datasheet_id=?", (unit_to_load,))
            result = cursor.fetchall()
            for row in result:
                tempItem = {"ability_id": row["ability_id"], "cost":row["cost"]}
                self.ability_list.append(tempItem)
            # Using pointer data from previous step, pull actual text of abilities 
            for entry in self.ability_list:
                cursor = conn.execute("SELECT name, description from Abilities WHERE id=?", (entry["ability_id"],))
                result = cursor.fetchone()
                entry["name"] = result["name"]
                entry["description"] = stripHTML(result["description"])
            # Pulling in unit's associated keywords
            cursor = conn.execute("SELECT keyword, model from Datasheets_keywords WHERE datasheet_id=?", (unit_to_load,))
            result = cursor.fetchall()
            for row in result:
                if row["model"] != "":
                    self.keywords_list.append('' + row["keyword"] + '(' + row["model"] + ')')
                else:
                    self.keywords_list.append(row["keyword"])
            # Pulling stat values for each model in the unit
            cursor = conn.execute("SELECT name, M, WS, BS, S, T, W, A, Ld, Sv, Cost, cost_description," +
                "models_per_unit from Datasheets_models WHERE datasheet_id=?", (unit_to_load,))
            result = cursor.fetchall()
            for row in result:
                model_input = {"model_name": row["name"],
                    "model_M": row["M"], "model_WS": row["WS"],
                    "model_BS": row["BS"], "model_S": row["S"],
                    "model_T": row["T"], "model_W": row["W"],
                    "model_A": row["A"], "model_Ld": row["Ld"],
                    "model_Sv": row["Sv"], "model_count": 0}
                self.model_list.append(model_input)
            # Pulling list of wargear for the unit
            temp_wargear_list = []
            cursor = conn.execute("SELECT wargear_id, cost from Datasheets_wargear WHERE datasheet_id=?", (unit_to_load,))
            result =cursor.fetchall()
            for row in result:
                wargear_input = {"wargear_id": row["wargear_id"],
                                    "wargear_cost": row["cost"]}
                self.wargear_list.append(wargear_input)
            # Pulling data for each wargear piece
            for entry in self.wargear_list:
                temp_wargear = entry
                cursor = conn.execute("SELECT name, type, description from Wargear WHERE id=?", (entry["wargear_id"],))
                cursor2 = conn.execute("SELECT name, range, type, S, AP, D, abilities from Wargear_list WHERE wargear_id=?", (entry["wargear_id"],))
                result = cursor.fetchone()
                result2 = cursor2.fetchall()
                temp_wargear["wargear_name"] = result["name"]
                temp_wargear["wargear_type"] = result["type"]
                temp_wargear["wargear_description"] = result["description"]
                # If result2 is only one entry, add descriptions to existing list item
                # Otherwise, add sub-gear below it on the list for each profile
                if len(result2) == 1:
                    # TEST print("Length is 1")
                    temp_wargear["wargear_range"] = result2[0]["range"]
                    temp_wargear["wargear_type"] = result2[0]["type"]
                    temp_wargear["wargear_s"] = result2[0]["S"]
                    temp_wargear["wargear_ap"] = result2[0]["AP"]
                    temp_wargear["wargear_d"] = result2[0]["D"]
                    temp_wargear["wargear_abilities"] = stripHTML(result2[0]["abilities"])
                    temp_wargear["is_active"] = False
                    temp_wargear_list.append(temp_wargear)
                elif len(result2) > 1:
                    temp_wargear_list.append(temp_wargear)
                    for sub_entry in result2:
                        shot_type = {"wargear_name":sub_entry["name"], "wargear_type":sub_entry["type"],
                                    "wargear_s":sub_entry["S"], "wargear_ap":sub_entry["AP"],
                                    "wargear_d":sub_entry["d"], "wargear_abilities":stripHTML(sub_entry["abilities"]),
                                    "is_active": False}
                        temp_wargear_list.append(shot_type)
                else:
                    print("ERROR: Incorrect wargear generation!")
            # Apply the new, complete list of wargear, overwriting the current one
            self.wargear_list = temp_wargear_list
            
            # Pulling data for psyker abilities
            if self.psychic_text != "No psychic powers":
                cursor = conn.execute("SELECT roll, name, type, description from PsychicPowers WHERE type=?", (self.faction,))
                result =cursor.fetchall()
                for row in result:
                    psychic_power = {"power_name": row["name"], "power_roll": row["roll"],
                                    "power_type":row["type"], "power_description": stripHTML(row["description"]),
                                    "is_active": False}
                    self.psychic_list.append(psychic_power)
                    
    # END of 'loadUnitSQLData' method